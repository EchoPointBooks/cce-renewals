#!/usr/bin/env python3 -u

import argparse
import csv
import os
import re

CAT = re.compile(r'(?<![12]\-)unnested\.tsv')
PSD = re.compile(r'(?<!unnested)\.tsv')

def match_file(d, r):
    return [os.path.join(d, f) for f in os.listdir(d) if r.search(f)][0]

get_parsed_file = lambda d:  match_file(d, PSD)
get_unnested_cat_file = lambda d: match_file(d, CAT)


def parsed_file(d):
    try:
        lines = 0
        parsed = 0
        with open(get_parsed_file(d)) as p:
            reader = csv.DictReader(p, delimiter='\t')
            for row in reader:
                lines += 1
                parsed += 1 if row['oreg'] else 0
        return {'lines out': lines, 'lines parsed': parsed}
    except IndexError:
        return {'lines out': 0, 'lines parsed': 0}

#def get_unnested_cat_file(d):
#    return [os.path.join(d, f) for f in os.listdir(d) if CAT.search(f)][0]
    
def unnested_cat_file(d):
    try:
        with open(get_unnested_cat_file(d)) as tsv:
            for i, l in enumerate(tsv):
                pass
            return {'lines in': i + 1}
    except (IndexError, UnboundLocalError):
        return {'lines in': 0}


def get_stats(d):
    path = os.path.join(args.data_dir, d)
    return({**{'year': d},
            **unnested_cat_file(path),
            **parsed_file(path)})


def get_dirs(p):
    return [d for d in sorted(os.listdir(p)) if re.match('19\d{2}', d)]


def to_pct(i, o):
    if o == 0 or i == 0:
        return 'n/a'

    return '{:5.2f}'.format(((o*1.0)/(i*1.0))*100)


def format_row(r):
    print('{:>4s} {:>4s} {:>4s} {:>5s} {:>4} {:>5s}'.format(
        r['year'],
        str(r['lines in']) if r['lines in'] else 'n/a',
        str(r['lines out']) if r['lines out'] else 'n/a',
        to_pct(r['lines in'], r['lines out']),
        str(r['lines parsed']) if r['lines parsed'] else 'n/a',
        to_pct(r['lines out'], r['lines parsed']))) 


parser = argparse.ArgumentParser(description='Report stats on renewal files')
parser.add_argument('-d', '--data-dir', metavar='DIR', type=str,
                    help='Data directory to examine')
args = parser.parse_args()

for d in get_dirs(args.data_dir):
    format_row(get_stats(d))
